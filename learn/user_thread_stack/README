Each user level thread includes a unique program counter, a stack in the related
process address space, a stack in kernel space(kstack) and a set of processor
registers. The Linux kernel always schedules individual threads, not processes.

Linux maintains a kernel stack for every active thread. These stacks are
THREAD_SIZE (2*PAGE_SIZE) big. These stacks contain useful data as long as a
thread is alive or a zombie. While the thread is executing in user space, the
kernel stack(kstack) for this thread is empty except for the 'thread_info'
structure at the bottom.

Why is [ a separate ] kernel stack used per thread?
--------------------------------------------------

User space programs can make their stack (pointer) anything they want, so the
kernel therefore cannot trust the user space stack pointer to be valid nor
usable. Hence, OS can't keep any meta-data about a thread in the user space
stack of the thread, and therefore will require one set under its own control.

Different CPU architectures implement this in different ways; x86 CPUs
automatically switch stack pointers when privilege mode switches occur, and the
values to be used for different privilege levels are configurable - by
privileged code (i.e. only the kernel).

If a local variable is declared in an ISR, where will it be stored ?
-------------------------------------------------------------------

On the kernel stack. Once there is a interrupt, the process privilege is shifted
from user privilege to kernel privilege, thread's stack pointer is replaced with
its kernel stack address and the ISR is executed. So, if there are local
variables in an ISR, it get stored in kernel stack of the thread.

Process descriptor
------------------

Linux has a unique implementation of threads: It does not differentiate threads
and processes. To Linux, a thread is just a special kind of process. Remember,
in Linux, the only difference between processes and threads is the fact that
multiple threads can share an address space (forming a process).

Note: Another name for a 'process' is a 'task'. The Linux kernel internally
refers to processes as tasks. So, wherever we see the term 'task' we are
actually referring to a process.

The kernel stores the list of processes/tasks in a circular doubly linked list,
called the task list. Each element in this task list is a "Process Descriptor"
of the type 'struct task_struct', which is defined in <linux/sched.h>. The
process descriptor contains all the information about a specific process.

        ----------------      ----------------      ---------------- 
        |    TASK 1    |      |    TASK 2    |      |    TASK 3    |
 START->|    process   |----->|    process   |----->|    process   |->NULL
  NULL<-|   Descriptor |<-----|   Descriptor |<-----|   Descriptor |<-END
        | (task_struct)|      | (task_struct)|      | (task_struct)|
        |______________|      |______________|      |______________|

The structure 'task_struct' is relatively a large data structure, at around
1.7 kilobytes on a 32-bit machine. This size, however, is quite small
considering that the structure contains all the information that the kernel has
and needs about a process.

The process descriptor contains the data that describes the executing program,
like open files for this process/task, the process's address space related info,
pending signals to a process, process state, and much more about a process.

Allocation of process Descriptor(strcut task_struct):
----------------------------------------------------

The structure 'task_struct' is allocated via the 'slab allocator' to provide
object reuse and cache coloring. 

Earlier(before linux kernel 2.6), this structure 'task_struct' used to be stored
in the bottom of the kernel stack per thread.

But now, the 'task_struct' is part of another strcuture 'thread_info' and this
'thread_info' is stored at the same place (in the bottom of the kernel stack).

To clearly understend the placement of 'thread_info' structure in the kernel
stack of each thread, we can refer the below example.

This is just an example, and each linux thread has diffferent start and end
address for its kstack.

   ---------------------- (0xFF2000) <-- Start address of kstack for a thread 
  |         |           |    /\
  |         |           |     |
  |         |           |     |
  |         |           |     |
  |         |           |     |
  |        \|/          |     |
  |   STACK POINTER     | 2 PAGES SIZE
  |                     | PAGE_SIZE=4KB     
  |                     |     |
  |                     |     |
  |                     |     |
  |                     |     |
  |                     |     |
  |                     |     |
  |                     |     |
  |_____________________|     |
  |                     |     |
  |                     |     |
  | struct thread_info  |     |
  |                     |    \|/
  |_____________________| (0xFF0000) <-- End address of kstack for a thread

In the above example, a thread's kstack is gworing downside(from higher address
to the lower address).

Here, Note that the 'thread_info' structure is present at the very end of
kstack. Meaning, the very opposite side of the starting address of the kstack.
So, we can say that the effective kstack size per thread is,

        = 2 PAGES size - sizeof(struct thread_info)



