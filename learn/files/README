(1) What is a file?
------------------
A file is simply a linear array of bytes, each of which we can read or write.
Each file has a low level name, usually a number(inode number) and often a user
is not aware of this name.


(2) What is a directory?
-----------------------
A directory is also a file(has inode number), but it contains a list of
"user-readable name, low-level name(inode number)" pairs.

A directory file, can have a pair of 'user-readable name, low-level
name(inode number)' for another directory. By placing directories within other
directories, users build 'directory tree'(directory hierarchy).

The 'directory hierarchy' starts at a root directory(generally referred as /).

Note : In Linux, everything is represented as a file. Like, devices, pipes,
and even processes.

(3) How to create a file?
------------------------

'open' system call can be used to create a new file or open an already existing
file.
An example of 'open' system call is as below,

int fd = open("foo", O_CREAT|O_WRONLY|O_TRUNC, S_IRUSR|S_IWUSR);

'open' system call returns an integer(called a 'file descriptor'), when
successful.

This integer is nothing but an index of array maintained per process wise(not
system wide array, its just per process), referred as 'File descriptor table'.

Each process has an array, where each element points to a file pointer. Indexes
of this array are the 'file descriptors' returned by 'open' system call.

We can think of these indexs as below:

       0-----------------
        | File pointer0 |
       1-----------------
        | File pointer1 |
       2-----------------
        | File pointer2 |
       3-----------------
        | File pointer3 |
       4-----------------
        | File pointer4 |
       5-----------------
        |       |       |
                |
                |
               \|/


We can find the maximum allowed files per process as below:

[ ] cat /proc/1245/limits | grep 'Max open files'
Max open files            1024                 524288               files

The entries here are 'soft limit', 'hard limit' and 'Units'. We can read about
all these separately, but let's consider that we can create maximum 1024 files
per process.

Hence, our per process FD complete array looks like below,


       0-----------------
        | File pointer0 |
       1-----------------
        | File pointer1 |
       2-----------------
        | File pointer2 |
       3-----------------
        | File pointer3 |
       4-----------------
        | File pointer4 |
       5-----------------
        |       |       |
        |       |       |
        |       |       |
        |      \|/      |
    1023-----------------
        |               |
        -----------------

Each index here, represents a file descriptor.

Any running process already have 3 indexes(3 file descriptors) used. A
file pointer at index 0 points to 'standard input', a file pointer at index 1
points to 'standard output', and a file pointer at index 2 points to
'standard error'. These are represented as file descriptors 0, 1 and 2
respectively. Thus, a new file opened in a process, will get file descriptor
as 3 and above.

4. Open file table:
------------------
Linux maintains a global system-wide 'open file table'. Each entry in this
table tracks which underlying file the descriptor refers to, the current
offset, and other relevant details such as whether the file is readable or
writable. An 'Open file table' maintains a list of open files in the system.

'File descriptor table' as mentioned in earlier section, has pointers to 'Open
file table'.

5. v-node table:
---------------

A v-node table is again a system wide table, where each entry in this table
refers to a file. Its an abstraction to the real file management in Linux.
For example, if the below file system is EXT3, then in the OS, system calls
interact only with the v-node table, it does not know what file system is
managing the files below.

6. File access scenarios:
------------------------

Let's see how files are referred by multiple processes in Linux. We can
have multiple scenarios like below:

(a) A process opens a single file
---------------------------------

    "Descriptor        "Open files table"            "V-node table"
	Table"             (shared by                    (Info about a
	(One table,        all processes)               file on Disk, shared
	per process)                                    by all processes)


  P1 descriptor
  table                                                   File X
 __________________     |                   |       |___________________|
|                  |    |      File X       |  |--->|   File permission |
|     ------------ |    |___________________|  |    |___________________|
| FD0 |          | | -->|      .            |  |    |   File size       |
|     ------------ | |  |      .            |  |    |___________________|
| FD1 |          | | |  |  refcnt = 1       |  |    |   File Type       |
|     ------------ | |  |  offset = 0       |__|    |___________________|
| FD2 |          | | |  |___________________|       |      .            |
|     ------------ | |  |                   |       |      .            |
| FD3 |          |----  |                   |       |      .            |
|     ------------ |    |                   |       |                   |
| FD4 |          | |    |                   |       |                   |
|     ------------ |    |                   |       |                   |
|          |       |    |                   |       |                   |
|         \|/      |    |                   |       |                   |
|__________________|

Here, Process 'p1' opened a single file. So, it has an entry in its 'descriptor
table'. Also, global 'open files table' also has an entry related to it. Also,
the global V-node table also has an entry for this, which finally provides the
data from the file. Here, the 'refcnt' also holds the value '1', as there is
only one reference to this file, because only one 'open' call used to open this
file.
When the file is opened, the 'fd' points to the starting of the file, hence,
'offset' is 0.

Refer 'test1.c' for example of this case.

[ ] rm -rf somefile.txt
[ ] gcc test1.c
[ ] ./a.out
[ ] cat somefile.txt
ONE TWO

Every time a 'write' system call is used, the current 'offset' value from
'open file table' is taken and used to write the data in the file. Thus, we have
'TWO' after 'ONE' written in the file by this process.

(b) A process opens two different files
---------------------------------------

    "Descriptor        "Open files table"            "V-node table"
	Table"             (shared by                    (Info about a
	(One table,        all processes)               file on Disk, shared
	per process)                                    by all processes)

  P1 descriptor                                          .
  table                                                  .
 ------------------     |                   |       |___________________| File X
|                  |    |      File X       |  |--->|   File permission |
|     |----------| |    |___________________|  |    |___________________|
| FD0 |          | | -->|      .            |  |    |   File size       |
|     ------------ | |  |      .            |  |    |___________________|
| FD1 |          | | |  |  refcnt = 1       |  |    |   File Type       |
|     ------------ | |  |  offset = 0       |__|    |___________________|
| FD2 |          | | |  |___________________|       |      .            |
|     ------------ | |  |                   |       |      .            |
| FD3 |          |-|--  |                   |       |      .            |
|     ------------ |    |                   |       |      .            |
| FD4 |          |-|--  |      File Y       |       |      .            |
|     ------------ | |  |___________________|       |___________________| File Y
|          |       | |  |      .            |  |--->|   File permission |
|         \|/      | |  |      .            |  |    |___________________|
|                  | -->|   refcnt = 1      |  |    |   File size       |
|__________________|    |   offset = 0      |__|    |___________________|
                        |___________________|       |   File Type       |
                        |                   |       |___________________|
                        |                   |       |      .            |
                        |                   |       |      .            |

[ ] rm -rf somefile1.txt
[ ] rm -rf somefile2.txt
[ ] gcc test2.c
[ ] ./a.out
[ ] cat somefile1.txt
ONE
[ ] cat somefile2.txt
TWO

Here, both files are opened with two different 'file descriptors'. So, they
have different entries in the 'Open file table'. Both the entries in 'Open file
table' have refcnt as 1, as they are opened only once. Also, offset is also set
to 0 for both of them.

(c) A process opens the same file twice
---------------------------------------

    "Descriptor        "Open files table"            "V-node table"
	Table"             (shared by                    (Info about a
	(One table,        all processes)               file on Disk, shared
	per process)                                    by all processes)

  P1 descriptor                                          .
  table                                                  .
|------------------|    |                   |       |___________________| File X
|                  |    |      File X       |  |--->|   File permission |
|     ------------ |    |___________________|  |    |___________________|
| FD0 |          | | -->|      .            |  |    |   File size       |
|     ------------ | |  |      .            |  |    |___________________|
| FD1 |          | | |  |  refcnt = 1       |  |    |   File Type       |
|     ------------ | |  |  offset = 0       |__|    |___________________|
| FD2 |          | | |  |___________________|  |    |      .            |
|     ------------ | |  |                   |  |    |      .            |
| FD3 |          |-|--  |                   |  |    |      .            |
|     ------------ |    |                   |  |    |      .            |
| FD4 |          |-|--  |      File X       |  |    |      .            |
|     ------------ | |  |___________________|  |    |___________________| File Y
|          |       | |  |      .            |  |    |   File permission |
|         \|/      | |  |      .            |  |    |___________________|
|------------------| -->|   refcnt = 1      |  |    |   File size       |
                        |   offset = 0      |__|    |___________________|
                        |___________________|       |   File Type       |
                        |                   |       |___________________|
                        |                   |       |      .            |
                        |                   |       |      .            |

Note : Here, as you can notice that if a file is opened twice in a process, we
have 2 file descriptors in the 'descriptor table', and both of them have
separate entries in the global 'open files table'. The reason is that both file
descriptors open the file differently, they will write in the files at its own
'offset', their permission might be different etc. Hence, we have two multiple
entries in the 'Open files table' for the same files, when opened in the same
process.

Since, both of the file descriptors have different entries in 'open file table',
both of them have different 'offset' value, each one of them pointing to
starting of the table (0). So, when 'write' call happens for the second file,
it overwrites the data written by the first file descriptor.

[ ] rm -rf somefile.txt
[ ] gcc test3.c
[ ] ./a.out
[ ] cat somefile.txt
TWO

(d) Two unrelated processes open the same file
----------------------------------------------

    "Descriptor        "Open files table"            "V-node table"
	Table"             (shared by                    (Info about a
	(One table,        all processes)               file on Disk, shared
	per process)                                    by all processes)

  P1 descriptor tbl                                                  .
|------------------|    |                   |       |___________________| File X
|                  |    |      File X       |  |--->|   File permission |
|     ------------ |    |___________________|  |    |___________________|
| FD0 |          | | -->|      .            |  |    |   File size       |
|     ------------ | |  |      .            |  |    |___________________|
| FD1 |          | | |  |  refcnt = 1       |  |    |   File Type       |
|     ------------ | |  |  offset = 0       |__|    |___________________|
| FD2 |          | | |  |___________________|  |    |      .            |
|     ------------ | |  |                   |  |    |      .            |
| FD3 |          |-|--  |                   |  |    |      .            |
|     ------------ |    |                   |  |    |      .            |
| FD4 |          | |    |      File X       |  |    |      .            |
|     ------------ |    |___________________|  |    |___________________| File Y
|          |       |    |      .            |  |    |   File permission |
|         \|/      |    |      .            |  |    |___________________|
|------------------| -->|   refcnt = 1      |  |    |   File size       |
                     |  |   offset = 0      |__|    |___________________|
 P2 descriptor tbl   |  |___________________|       |   File Type       |
|------------------| |  |                   |       |___________________|
|                  | |  |                   |       |      .            |
|     ------------ | |  |                   |       |      .            |
| FD0 |          | | |
|     ------------ | |
| FD1 |          | | |
|     ------------ | |
| FD2 |          | | |
|     ------------ | |
| FD3 |          |-|--
|     ------------ |
| FD4 |          | |
|     ------------ |
|          |       |
|         \|/      |
|------------------|

This case is same as case 'c', where each file descriptor had one entry in the
'open file table', each one entry there holds a separate 'offset' pointer,
pointing to location 0 of the file, and writing via the second file descriptor
overwrite the file.

(e) Two related(parent child) processes open the same file
----------------------------------------------------------

    "Descriptor        "Open files table"            "V-node table"
	Table"             (shared by                    (Info about a
	(One table,        all processes)               file on Disk, shared
	per process)                                    by all processes)

  P1 descriptor tbl                                                  .
      (Parent)
|------------------|    |                   |       |___________________| File X
|                  |    |      File X       |  |--->|   File permission |
|     ------------ |    |___________________|  |    |___________________|
| FD0 |          | | -->|      .            |  |    |   File size       |
|     ------------ | |  |      .            |  |    |___________________|
| FD1 |          | | |  |  refcnt = 2       |  |    |   File Type       |
|     ------------ | |  |  offset = 0       |__|    |___________________|
| FD2 |          | | |  |(offset is shared) |       |      .            |
|     ------------ | |  |___________________|       |      .            |
| FD3 |          |-|--  |                   |       |      .            |
|     ------------ | |  |                   |       |      .            |
| FD4 |          | | |                              |      .            |
|     ------------ | |                              |___________________| File Y
|          |       | |                              |   File permission |
|         \|/      | |                              |___________________|
|------------------| |                              |   File size       |
                     |                              |___________________|
 P2 descriptor tbl   |                              |   File Type       |
     (child)         |                              |                   |
|------------------| |                              |___________________|
|                  | |                              |      .            |
|     ------------ | |                              |      .            |
| FD0 |          | | |
|     ------------ | |
| FD1 |          | | |
|     ------------ | |
| FD2 |          | | |
|     ------------ | |
| FD3 |          |-|--
|     ------------ |
| FD4 |          | |
|     ------------ |
|          |       |
|         \|/      |
|------------------|

[ ] rm -rf somefile.txt
[ ] gcc test4.c
[ ] ./a.out
[ ] cat somefile.txt
ONE TWO

This is an interesting case, where an entry in 'Open file table' is shared
between two related processes(parent and child). Hence, they have a common
offset between both of them. Due to this when first 'fd' write something in the
file, the 'offset' values increases, and then when the write happens with the
second 'fd', the actual file write happens at the last updated offset value
instead of starting from 0. That is the reason we see output of "ONE TWO".

(f) 'dup' system call
---------------------

'dup' system call is used to duplicate an already existing file descriptor.
'dup' just takes one file descriptor and return another file descriptor, which
points to the same entry in 'open file table'. Means, both of the file
descriptors share the same 'offset' and everything else in the 'open file table'
entry, which is pointed by both the file descriptors.


    "Descriptor        "Open files table"            "V-node table"
	Table"             (shared by                    (Info about a
	(One table,        all processes)               file on Disk, shared
	per process)                                    by all processes)

  P1 descriptor tbl                                                  .
      (Parent)
|------------------|    |                   |       |___________________| File X
|                  |    |      File X       |  |--->|   File permission |
|     ------------ |    |___________________|  |    |___________________|
| FD0 |          | | -->|      .            |  |    |   File size       |
|     ------------ | |  |      .            |  |    |___________________|
| FD1 |          | | |  |  refcnt = 2       |  |    |   File Type       |
|     ------------ | |  |  offset = 0       |__|    |___________________|
| FD2 |          | | |  |(offset is shared) |       |      .            |
|     ------------ | |  |___________________|       |      .            |
| FD3 |          |-|--  |                   |       |      .            |
|     ------------ | |  |                   |       |      .            |
| FD4 |          |-|-|                              |      .            |
|     ------------ |                                |___________________| File Y
|          |       |                                |   File permission |
|         \|/      |                                |___________________|
|------------------|                                |   File size       |
                                                    |___________________|
                                                    |   File Type       |
                                                    |                   |
                                                    |___________________|
                                                    |      .            |
                                                    |      .            |
[ ] rm -rf somefile.txt
[ ] gcc test5.c
[ ] ./a.out
[ ] cat somefile.txt
ONE TWO

7. lseek (offset):
-----------------

'lseek' system call helps to change the value of offset, and then read/write
data in any file at a particular offset in a file.

off_t lseek(int fields, off_t offset, int whence);

fields = file descriptor (fd).
offset = provide the offset value, where you want to set the file offset.
whence = defines how the seek is preformed.

If whence is SEEK_SET, the offset is set to offset bytes.
If whence is SEEK_CUR, the offset is set to its current location plus offset
bytes.
If whence is SEEK_END, the offset is set to the size of the file plus offset
bytes.

8. mmap():
---------

'mmap' just creates space for a file in 'virtual address space' of a process.
This means, that 'mmap' fits a portion or file(for complete file) in main
memory (based on the size provided in 'mmap' call).

The benefit of doing memory mapping of 'hard disk space' in 'main memory' is
that it avoids overhead of accessing the disk multiple times, and rather have
a copy of disk space of a file in memory, and keep reading/writing on it and
this copy of file data in main memory is written back to the hard disk in some
timely manner.

If you want to immediately sync up the mmap'ed memory to the hard disk(rather
than waiting for OS to do the same), you can use 'fsync' system call as
'fsync(int fd)'.

For example,

Let's say we have a small file with size of 11 bytes.

[ ] echo 1234567890 > myfile
[ ] ls -lart myfile
-rw-r--r--  1 root root    11 Aug 28 17:50 myfile


Now, let's write some code to open this file and map it in the main memory.
Below is a simple code snippet to see how virtual memory space changes with
a mmap.

    =======================================================================
    int fd = open("./myfile", O_RDWR, S_IRUSR|S_IWUSR);
    // Check the process virtual maps using /proc/<pid>/maps here,
    // then press enter.
    getchar();
    char *file_in_memory = mmap(NULL, 11, PROT_READ | PROT_WRITE, MAP_SHARED,
                           fd, 0);
    // Check the process virtual memory maps using /proc/<pid>/maps here,
    // then press enter.
    getchar();
    =======================================================================

Note here that, we just opened a file using 'open' file descriptor, and passed
this 'file descriptor' in the mmap system call.

'mmap' defines memory in virtual address space with the size of required pages.
Here, one page is sufficient for the provided size (11 bytes) in mmap, so mmap
will simply associate one page in the virtual address space of the process for
this file.

Please refer test6.c to check this.

[ ] gcc test6.c
[ ] ./a.out
Check the virtual memory map(/proc/2667/maps) and press enter.

Check the virtual memory map(/proc/2667/maps) again. You will see an extra entry
of 1 page for the mmap'ed file.

Here, we can do more experiments with this, for example,
(1) With more size of file, ask mmap to allocate less size in virtual memory
maps and vice versa. Check the virtual memory maps.
(2) mmap a small fize (1 PAGE) file, and just keep writing the file as multiple
pages, and see whether virtual address space increase the size of the mapped
memory or not and why?
