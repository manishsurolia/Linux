In a 32-bit byte-addressable RAM, the whole memory is divided as below in Linux.

        ____________________________ 0xFFFFFFFF
        |                          |
        |                          |  (By Default, the kernel uses the top
        |       Kernel             |   1 GB of virtual address space).
        |      Addresses           |
        |                          |
        |                          |
        |                          |
        |                          |
        ---------------------------- 0xC0000000
        |                          | (CONFIG_PAGE_OFFSET)
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |
        |       User space         |
        |       Addresses          | (Each user space task gets the lower 3GB of
        |                          |  virtual address space).
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |
        |__________________________| 0x00000000

So, basically each task is permitted to use this 3 GB of space. :)
Of course, its possible with the use of virtual address space mechanism.

'mm_struct' of 'task_struct' contains all the information about virtual memory
regions of the task.

struct task_struct {
    ..........
    struct mm_struct *mm;
    ..........
};

Any task's virtual memory (text, data, stack, heap..etc) in user space, is
maintained by this below member(vm_area_struct) of 'mm_strcut'. It is allocated
by system call 'mmap'. 'mmap' system call is responsible to provide the physical
memory page frames for the virtual memory, update the page table for the task
and then update this below 'mmap' link list (inside 'mm_struct'). 

struct mm_struct {
    struct vm_area_struct *mmap;		/* list of VMAs */
    ..........
    pgd_t * pgd;                        /* Page table for this task */
    ..........
};

This 'vm_area_struct' inside 'mm_struct' is a link list, where each node
contains the start and end of virtual memory for this task for different
virtual memory segments like text, data, stack..etc. 

struct vm_area_struct {
	/* The first cache line has the info for VMA tree walking. */

	unsigned long vm_start;	/* Our start address. */
	unsigned long vm_end;   /* The first byte after our end address. */
    ..........
}
    
Note : Each node in above link list contains start and end address for a virtual
segment.
These are basically the addresses generated by compiler assuming that whole RAM
is available for it to consume.
So, its VIRTUAL address, not PHYSICAL ADDRESS.

When program executes, address access are first checked with these addresses,
that the memory address falls in these range or not. If not, its a
'segmentation fault'. Otherwise, if the requested address is in this range,
the physical address is taken from the TLB/Page table('pgd' member of
'mm_struct').
