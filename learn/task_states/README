In Linux, processes/threads are alike to the kernel. The scheduler and various
other kernel sub-systems do not differentiate processes/threads.

Each process/thread is represented as a 'task_struct' structure in kernel space.

It may happen that two or more processes(task_struct) share the address space
(like, data segment, code segment and heap..etc).

For any process creation, kernel does below things,

    1. Make a space of size(THREAD_SIZE) in the main memory.
    2. For x86 platform, it is double of PAGE_SIZE(as below).
            #define THREAD_SIZE_ORDER	1
            #define THREAD_SIZE		(PAGE_SIZE << THREAD_SIZE_ORDER)
    2. This is also called the task's kernel stack.
    3. Now, In one end of this task's kernel stack, structure 'task_struct' will
       reside and 'stack' pointer of 'task_struct' will point to the other side
       of this kernel's stack memory for this task.
    4. Meaning, the size of kernel's stack for a task is limited to this size,
       'THREAD_SIZE - sizeof(task_struct)'. Hence, be careful when you try to
       write interrupt handlers for a task. Don't take big size arrays in signal
       handlers. The kernel stack for a task is limited. It is not expanded
       same as user-space stack of a task.

Note : When a user program invokes a system call, immediatly mode switch happens
to kernel space. When mode switches to kernel space, kernel start using the
task's kernel stack('stack' pointer of 'task_struct') for its program execution,
otherwise when task is running in user-space, this kernel stack is empty.

Below is the structure of 'task_struct'. Here, you can see that it has a
'__state' member, which reflect, what is the state of this task. When a task is
running its code this value will be 'TASK_RUNNING'. For example, if a task just
started, it will be in runnable queue of the kernel. Scheduler will pick it at
some point of time and start execution. If scheduler switch to another task,
then also this task will be in runnable queue, because it is ready to execute.

struct task_struct {
#ifdef CONFIG_THREAD_INFO_IN_TASK
	/*
	 * For reasons of header soup (see current_thread_info()), this
	 * must be the first element of task_struct.
	 */
	struct thread_info		thread_info;
#endif
	unsigned int			__state;
.........
.........
}

Different types of possible states are as below:
Runnable(R) - TASK_RUNNING - Task is either in ready state or running.
Sleep(S) - TASK_INTERRUPTABLE
Disk Sleep(D) - TASK_UNINTERRUPTABLE
Dead (X) - __EXIT_DEAD
Zombie(Z) - __EXIT_ZOMBIE
TTY STOP(T) - __TASK_STOPPED (TTY Stop)
Traced (t) - __TASK_TRACED

Suppose, our task start to wait for some input/output. Let's say we do a
'getchar', which gets stuck on an input from user. In this case, this task will
get the value 'TASK_INTERRUPTIBLE' in '__state' member and task will be moved
from 'runnable queue' to 'wait queue'. Once the user provides an input, this
task will be moved from 'wait queue' to 'runnable queue' again and scheduler can
anytime take this task and start to execute.

Example of this is signal1.c in this same folder.

Here, once 'getchar' is called, this task is put in the 'IO wait queue', and
'__state' is set to 'TASK_INTERRUPTIBLE'(S). Meaning, suppose when it was
waiting for an input from user, if you press ctrl-c, this task will be moved to
the 'runnable queue' by setting 'TASK_RUNNING' to the '__state' of the task,
then scheduler will schedule this task at some time, execution of the signal
handler for the same signal will happen, and again the task will come back to
the 'IO wait queue' by setting up 'TASK_INTERRUPTIBLE' in '__state' and again
continue to wait for the input from user as before.
This is an example of 'TASK_INTERRUPTIBLE'(S).

-------------------------------------------
[ ] gcc signal1.c
[ ] ./a.out
Calling getchar() is putting me in 'TASK_INTERRUPTABLE' state.
When I am in 'TASK_INTERRUPTABLE' state, any 'ctrl-c' signal to
me will put me back to the 'TASK_RUNNING' state and sig_handler
function will be called and then again I will be moved to
'TASK_INTERRUPTABLE' state. When an input required by 'getchar'
is passed to me, I will be again moved to 'TASK_RUNNING' state
and continue with the executeion of 'getchar' in main.

Note : Here, if you check the status of this process in another window as below,
you will find that the process is in 'TASK_INTERRUPTABLE'(s) state.

[ ] ps -aeo args,state | grep a.out
./a.out                     S

Now, if you press ctrl-c, you will see the below outout. after this you can just
enter, and come out of the program, as below:

^CI am main task's sig_handler. Wont die..
^CI am main task's sig_handler. Wont die..
                                           <-- Enter pressed here.
Main task is over.
-------------------------------------------

Also, suppose, our task calls 'sleep(60)' (sleeping for 60 seconds). This is
actually asking the timer to send us a signal after 60 seconds. So here,
'__state' gets the value 'TASK_UNINTERRUPTIBLE' and goes to the 'wait queue'.
After 60 seconds when the task gets a signal from timer, the ISR for this task
gets executed, and then execution for this task goes on.

Suppose, before this 60 seconds is completed, you send an interrupt(ctrl-c) to
the task, the task will be moved to the 'running queue' by setting up
'TASK_RUNNING' and scheduler will pick this task and execute the signal handler
but now, this task will not go to the 'TASK_UNINTERRUPTIBLE' state again as we
saw in last example (signal1.c), where after execution of signal handler task
went back to the same 'TASK_INTERRUPTIBLE' state and started to wait for the IO.

Example of 'TASK_UNINTERRUPTIBLE' is signal2.c

-------------------------------------------
[ ] gcc signal2.c
[ ] ./a.out
^CI am in main task's sig_handler. Wont die..
Main thread sleep is over.
-------------------------------------------

The 3rd example is to show what happens if there are 3 tasks, which are sharing
address space. If these all tasks set up a signal handler for the same type,
let's say, 'SIGINT'. Then, if the same signal is send by a user, which task
will handle this.

The answer is that, same as address space, ISR are also shared between address
space sharing tasks. That means, whatever is the latest 'signal' api is called
for all these tasks, that will be the one which will be called if an interrupt
is called.

In this example, there is one main program which created 2 tasks, which runs
one by one for some time. The very first the main thread ran and did 'signal',
so the ISR for signal is set with a function, then the thread1 'signal' is
called. Hence, that sig_handler is effective, and then at last thread2's
'signal' is done, so the effective signal handler becomes that one.

Means, signal handlers are common between all these address space sharing tasks.

and also, when the signal is sent, the main task is the one which runs the
signal handler. With this example, we can clearly understand this.

-------------------------------------------
[ ] gcc signal3.c  -lpthread
[ ] ./a.out
Task 1 running.
^CI am in task2 sig_handler. Wont die..
Main task's sleep is over. Again going for sleep
^CI am in task2 sig_handler. Wont die..
Main task's sleep is over. Again going for sleep
Task 1 sleep is over.
Task 2 running.
^CI am in task2 sig_handler. Wont die..
Main task's sleep is over. Again going for sleep
Task 2 sleep is over.
Task 1 running.
Task 1 sleep is over.
Task 2 running.
Task 2 sleep is over
-------------------------------------------

Zombie state of a task is like task is exited but not yet reaped. The duty of
the parent task is to call 'wait' system call explicitly to wait for child task
to finish, to find out what is the exit code of the child,

So, if the parent task did not call 'wait', it child will go in the zombie
state.

Below is a program related to the exit state of the main function of a program.
The return value of the main function represents the return value of the whole
program and only last 8-bits of the return value is actually the return value.

Let's say we have a main function, which returns the value 2000, then what will
be the actual return value.

2000 ==> 00000000 00000000 00000111 11010000

Last 8-bits represents the value 208, so the actual return value will be 208.

-------------------------------------------
[ ] gcc ret.c
[ ] ./a.out
[ ] echo $?
208
-------------------------------------------

Only the last 8-bits represents the EXIT states of the program. Not only in
Linux, but in all Unix systems it is the same.

Dead (X) - __EXIT_DEAD :
----------------------

This state of a task (__EXIT_DEAD) is very short duration state that we
generally don't get to see this state. This is for a very small time frame.

How does a task/'group of tasks' goes to exit?
exit library function calls 'exit_group'. 'exit_group' is basically responsible
to exit all the tasks which are their is a group or basically all the co-worker
tasks.

Even if we pass exit in any co-worker task, it will exit the whole group of
tasks. That's why its called exit_group system call. 'exit_group' is the last
system call it invokes, before exiting.

With the utility 'strace', we can figure out the function calls for a running
program.

Let's write this small program (example.c), and try to pass the binary to the
'strace', it will show the calls.

int main(void)
{
    return 50;
}

[ ] gcc example.c
[ ] strace ./a.out
execve("./a.out", ["./a.out"], 0x7fffabbe3fd0 /* 28 vars */) = 0
brk(NULL)                               = 0x56029eed4000
arch_prctl(0x3001 /* ARCH_??? */, 0x7ffd52f745f0) = -1 EINVAL (Invalid argument)
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=74394, ...}) = 0
mmap(NULL, 74394, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f61e0296000
close(3)                                = 0
openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\360q\2\0\0\0\0\0"..., 832) = 832
pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784
pread64(3, "\4\0\0\0\20\0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0", 32, 848) = 32
pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\t\233\222%\274\260\320\31\331\326\10\204\276X>\263"..., 68, 880) = 68
fstat(3, {st_mode=S_IFREG|0755, st_size=2029224, ...}) = 0
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f61e0294000
pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784
pread64(3, "\4\0\0\0\20\0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0", 32, 848) = 32
pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\t\233\222%\274\260\320\31\331\326\10\204\276X>\263"..., 68, 880) = 68
mmap(NULL, 2036952, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f61e00a2000
mprotect(0x7f61e00c7000, 1847296, PROT_NONE) = 0
mmap(0x7f61e00c7000, 1540096, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x25000) = 0x7f61e00c7000
mmap(0x7f61e023f000, 303104, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x19d000) = 0x7f61e023f000
mmap(0x7f61e028a000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1e7000) = 0x7f61e028a000
mmap(0x7f61e0290000, 13528, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f61e0290000
close(3)                                = 0
arch_prctl(ARCH_SET_FS, 0x7f61e0295540) = 0
mprotect(0x7f61e028a000, 12288, PROT_READ) = 0
mprotect(0x56029e363000, 4096, PROT_READ) = 0
mprotect(0x7f61e02d6000, 4096, PROT_READ) = 0
munmap(0x7f61e0296000, 74394)           = 0
exit_group(50)                          = ?
+++ exited with 50 +++

You can see here, that 'exit_group' is called at the end with the same value,
which was returned from main function.

The first thing what 'exit_group' does is, to mark the task as 'X', so that it
can not be scheduled on any of the run queue. Each processor has its run queue.

Generally run queue load balancing keep happening, whenever there is more load
on one queue, it gets off loaded to another run queue, so that this task runs
on a different processor.

Hence, to avoid any such movement of the task after program exited, we need to
mark it as 'X'. It should never be scheduled, by any means. Then 'exit_group'
starts freeing up all the resources hold by the tasks of this group. Like tasks
have memory-map structures, signal structures, file descriptor structures..etc.
'exit_group' will free up all the structures. Mean's releasing all the
resoruces occpied by this task.


Zombie(Z) - __EXIT_ZOMBIE:
-------------------------

After all the resoures are freed up by 'exit_group' this task is marked as
Zombie(Z).

After marking it as Zombie, 'exit_group' will try to find, who is its parent and
deliver a signal (SIGCHLD) to the parent that its child task has ended.

If parent has already ended before child sent 'SIGCHILD', init task(PID=1),
handles this child task.

TTY STOP(T) - __TASK_STOPPED (TTY Stop):
---------------------------------------

You can set this task state using 'ctrl-z'.

create a small program with a infinite while loop and start this program.
Then check its state as below(in different window).


[ ] ps -aeo state,args | grep a.out
R ./a.out

Now where the program is running, do ctrl-z, and then again check the status.
Program is stopped and moved to background.
[ ] ps -aeo state,args | grep a.out
T ./a.out

Now where the program is running, do 'fg' (foreground), and then again check the
status.

[ ] ps -aeo state,args | grep a.out
R ./a.out


Traced (t) - __TASK_TRACED:
--------------------------

When we attach debugger to a task, it is attached using 'ptrace'/'ptrace_attach'
APIs, it will attach to target process, and it will hook a breakpoint in the
text segment.

When a breakpoint instrcution is hit by a target process, immediatly the target
process is retained as it is, find out who is its parent, and go back to its
parent.

In Linux, There are 2 parents for a task, one is who actually created it,
another one is that who is currently controlling it. By default both will be
same.

In this case of gdb, gdb process becomes 'current parent' for this task,
which is being debugged. The state for that is 'Traced'(__TASK_TRACED).

Example:
-------

Just create a small program, like an infinite loop inside main function.
start this task, attach gdb to it. stop it to 'main' function.

Now, in other window check the state of this task. It will be 't', and the
parent pid will be gdb.

Try it out.
